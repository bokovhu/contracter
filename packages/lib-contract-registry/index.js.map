{
  "version": 3,
  "sources": ["src/index.ts"],
  "sourcesContent": ["import { AppContact, AppContract } from \"../../contract-model/src\";\r\n\r\nconst CONTRACT_REGISTRY_KEY = \"contracter.contractRegistry\";\r\n\r\nclass ContractRegistryImpl {\r\n\r\n    private _contracts: Array<AppContract> = [];\r\n\r\n    constructor() {\r\n\r\n        const persistedData = localStorage.getItem(CONTRACT_REGISTRY_KEY);\r\n        if (persistedData) {\r\n            this._contracts = JSON.parse(persistedData);\r\n        }\r\n\r\n    }\r\n\r\n    private async flush() {\r\n        localStorage.setItem(CONTRACT_REGISTRY_KEY, JSON.stringify(this._contracts));\r\n    }\r\n\r\n    public async listContracts(): Promise<Array<AppContract>> {\r\n        return this._contracts;\r\n    }\r\n\r\n    public async createContract(\r\n        newContract: AppContract\r\n    ): Promise<void> {\r\n        const newContractId = Math.random().toString(36).substring(7) + `${new Date().getTime()}`;\r\n        const toSave = Object.assign({}, newContract, { id: newContractId });\r\n        this._contracts.push(toSave);\r\n        await this.flush();\r\n    }\r\n\r\n    public async deleteContract(\r\n        id: string\r\n    ): Promise<void> {\r\n        this._contracts = this._contracts.filter(\r\n            contract => contract.id !== id\r\n        );\r\n\r\n        await this.flush();\r\n    }\r\n\r\n    public async updateContract(\r\n        updatedContract: AppContract\r\n    ): Promise<void> {\r\n        const existingContractIndex = this._contracts.findIndex(\r\n            contract => contract.id === updatedContract.id\r\n        );\r\n\r\n        if (existingContractIndex !== -1) {\r\n            this._contracts[existingContractIndex] = updatedContract;\r\n        }\r\n\r\n        await this.flush();\r\n    }\r\n\r\n}\r\n\r\nconst contractRegistryInstance = new ContractRegistryImpl();\r\n\r\nexport const listContracts = contractRegistryInstance.listContracts.bind(contractRegistryInstance);\r\nexport const createContract = contractRegistryInstance.createContract.bind(contractRegistryInstance);\r\nexport const deleteContract = contractRegistryInstance.deleteContract.bind(contractRegistryInstance);\r\nexport const updateContract = contractRegistryInstance.updateContract.bind(contractRegistryInstance);\r\n"],
  "mappings": "4bAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,EAAA,mBAAAC,EAAA,kBAAAC,EAAA,mBAAAC,IAEA,IAAMC,EAAwB,8BAExBC,EAAN,KAA2B,CAEf,WAAiC,CAAC,EAE1C,aAAc,CAEV,IAAMC,EAAgB,aAAa,QAAQF,CAAqB,EAC5DE,IACA,KAAK,WAAa,KAAK,MAAMA,CAAa,EAGlD,CAEA,MAAc,OAAQ,CAClB,aAAa,QAAQF,EAAuB,KAAK,UAAU,KAAK,UAAU,CAAC,CAC/E,CAEA,MAAa,eAA6C,CACtD,OAAO,KAAK,UAChB,CAEA,MAAa,eACTG,EACa,CACb,IAAMC,EAAgB,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,CAAC,EAAI,GAAG,IAAI,KAAK,EAAE,QAAQ,CAAC,GACjFC,EAAS,OAAO,OAAO,CAAC,EAAGF,EAAa,CAAE,GAAIC,CAAc,CAAC,EACnE,KAAK,WAAW,KAAKC,CAAM,EAC3B,MAAM,KAAK,MAAM,CACrB,CAEA,MAAa,eACTC,EACa,CACb,KAAK,WAAa,KAAK,WAAW,OAC9BC,GAAYA,EAAS,KAAOD,CAChC,EAEA,MAAM,KAAK,MAAM,CACrB,CAEA,MAAa,eACTE,EACa,CACb,IAAMC,EAAwB,KAAK,WAAW,UAC1CF,GAAYA,EAAS,KAAOC,EAAgB,EAChD,EAEIC,IAA0B,KAC1B,KAAK,WAAWA,CAAqB,EAAID,GAG7C,MAAM,KAAK,MAAM,CACrB,CAEJ,EAEME,EAA2B,IAAIT,EAExBH,EAAgBY,EAAyB,cAAc,KAAKA,CAAwB,EACpFd,EAAiBc,EAAyB,eAAe,KAAKA,CAAwB,EACtFb,EAAiBa,EAAyB,eAAe,KAAKA,CAAwB,EACtFX,EAAiBW,EAAyB,eAAe,KAAKA,CAAwB",
  "names": ["src_exports", "__export", "createContract", "deleteContract", "listContracts", "updateContract", "CONTRACT_REGISTRY_KEY", "ContractRegistryImpl", "persistedData", "newContract", "newContractId", "toSave", "id", "contract", "updatedContract", "existingContractIndex", "contractRegistryInstance"]
}
