{
  "version": 3,
  "sources": ["src/index.ts"],
  "sourcesContent": ["import { AppContact } from \"../../contract-model/src\";\r\n\r\nconst CONTACT_BOOK_KEY = \"contracter.contactBook\";\r\n\r\nclass ContactBookImpl {\r\n\r\n    private _contacts: Array<AppContact> = [];\r\n\r\n    constructor() {\r\n\r\n        const persistedData = localStorage.getItem(CONTACT_BOOK_KEY);\r\n        if (persistedData) {\r\n            this._contacts = JSON.parse(persistedData);\r\n        }\r\n\r\n    }\r\n\r\n    private async flush() {\r\n        localStorage.setItem(CONTACT_BOOK_KEY, JSON.stringify(this._contacts));\r\n    }\r\n\r\n    public async listContacts(): Promise<Array<AppContact>> {\r\n        return this._contacts;\r\n    }\r\n\r\n    public async createContact(\r\n        newContact: AppContact\r\n    ): Promise<void> {\r\n        const existingContactIndex = this._contacts.findIndex(\r\n            contact => contact.address === newContact.address\r\n        );\r\n\r\n        if (existingContactIndex !== -1) {\r\n            this._contacts[existingContactIndex] = newContact;\r\n        } else {\r\n            this._contacts.push(newContact);\r\n        }\r\n\r\n        await this.flush();\r\n    }\r\n\r\n    public async deleteContact(\r\n        address: string\r\n    ): Promise<void> {\r\n        this._contacts = this._contacts.filter(\r\n            contact => contact.address !== address\r\n        );\r\n\r\n        await this.flush();\r\n    }\r\n\r\n}\r\n\r\nconst contactBookInstance = new ContactBookImpl();\r\n\r\nexport const listContacts = contactBookInstance.listContacts.bind(contactBookInstance);\r\nexport const createContact = contactBookInstance.createContact.bind(contactBookInstance);\r\nexport const deleteContact = contactBookInstance.deleteContact.bind(contactBookInstance);\r\n"],
  "mappings": "ubAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,EAAA,kBAAAC,EAAA,iBAAAC,IAEA,IAAMC,EAAmB,yBAEnBC,EAAN,KAAsB,CAEV,UAA+B,CAAC,EAExC,aAAc,CAEV,IAAMC,EAAgB,aAAa,QAAQF,CAAgB,EACvDE,IACA,KAAK,UAAY,KAAK,MAAMA,CAAa,EAGjD,CAEA,MAAc,OAAQ,CAClB,aAAa,QAAQF,EAAkB,KAAK,UAAU,KAAK,SAAS,CAAC,CACzE,CAEA,MAAa,cAA2C,CACpD,OAAO,KAAK,SAChB,CAEA,MAAa,cACTG,EACa,CACb,IAAMC,EAAuB,KAAK,UAAU,UACxCC,GAAWA,EAAQ,UAAYF,EAAW,OAC9C,EAEIC,IAAyB,GACzB,KAAK,UAAUA,CAAoB,EAAID,EAEvC,KAAK,UAAU,KAAKA,CAAU,EAGlC,MAAM,KAAK,MAAM,CACrB,CAEA,MAAa,cACTG,EACa,CACb,KAAK,UAAY,KAAK,UAAU,OAC5BD,GAAWA,EAAQ,UAAYC,CACnC,EAEA,MAAM,KAAK,MAAM,CACrB,CAEJ,EAEMC,EAAsB,IAAIN,EAEnBF,EAAeQ,EAAoB,aAAa,KAAKA,CAAmB,EACxEV,EAAgBU,EAAoB,cAAc,KAAKA,CAAmB,EAC1ET,EAAgBS,EAAoB,cAAc,KAAKA,CAAmB",
  "names": ["src_exports", "__export", "createContact", "deleteContact", "listContacts", "CONTACT_BOOK_KEY", "ContactBookImpl", "persistedData", "newContact", "existingContactIndex", "contact", "address", "contactBookInstance"]
}
